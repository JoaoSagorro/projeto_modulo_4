// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLibrary.Models.Context;

#nullable disable

namespace RepositoryLibrary.Migrations
{
    [DbContext(typeof(EM_DbContext))]
    [Migration("20250422095556_new_database")]
    partial class new_database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RepositoryLibrary.Models.Booking", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("WasPresent")
                        .HasColumnType("bit");

                    b.HasKey("LessonId", "UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Horse", b =>
                {
                    b.Property<int>("HorseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HorseId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("HorseId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Horses");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<DateTime>("BeginOfLesson")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndOfLesson")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxSpots")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("LessonId");

                    b.HasIndex("LessonTypeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.LessonHorse", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("HorseId")
                        .HasColumnType("int");

                    b.HasKey("LessonId", "HorseId");

                    b.HasIndex("HorseId");

                    b.ToTable("LessonHorses");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.LessonProf", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LessonId", "UserId");

                    b.ToTable("LessonProfs");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.LessonType", b =>
                {
                    b.Property<int>("LessonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonTypeId"));

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonTypeId");

                    b.ToTable("LessonTypes");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Logo", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("LogoName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("SchoolId", "LogoName");

                    b.HasIndex("SchoolId")
                        .IsUnique();

                    b.ToTable("Logos");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassesIncluded")
                        .HasColumnType("int");

                    b.Property<int>("LessonTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.Property<bool>("Weekly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LessonTypeId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Photo", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("UserPhoto")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CAE")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SchoolCapacity")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.SchoolUser", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SchoolId", "UserId");

                    b.ToTable("SchoolUsers");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.UserHorse", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HorseId")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "HorseId");

                    b.HasIndex("HorseId");

                    b.ToTable("UserHorses");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.UserPayment", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("BuyDate")
                        .HasColumnType("date");

                    b.Property<int?>("AmountOfClasses")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BuyDate");

                    b.HasIndex("PackageId");

                    b.ToTable("UserPayments");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Views.Users_View", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CitizenNumber")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("ImageAuthorized")
                        .HasColumnType("bit");

                    b.Property<bool>("InformationAuthorized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedRoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocialHealthNumber")
                        .HasColumnType("int");

                    b.Property<int>("TaxIdentificationNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.ToView("Users_View", (string)null);
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Booking", b =>
                {
                    b.HasOne("RepositoryLibrary.Models.Lesson", "Lesson")
                        .WithMany("Bookings")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Horse", b =>
                {
                    b.HasOne("RepositoryLibrary.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Lesson", b =>
                {
                    b.HasOne("RepositoryLibrary.Models.LessonType", "LessonType")
                        .WithMany()
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryLibrary.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonType");

                    b.Navigation("School");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.LessonHorse", b =>
                {
                    b.HasOne("RepositoryLibrary.Models.Horse", "Horse")
                        .WithMany("LessonHorses")
                        .HasForeignKey("HorseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RepositoryLibrary.Models.Lesson", "Lesson")
                        .WithMany("LessonHorses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Horse");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.LessonProf", b =>
                {
                    b.HasOne("RepositoryLibrary.Models.Lesson", "Lesson")
                        .WithMany("LessonProfs")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Logo", b =>
                {
                    b.HasOne("RepositoryLibrary.Models.School", "School")
                        .WithOne("Logo")
                        .HasForeignKey("RepositoryLibrary.Models.Logo", "SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Package", b =>
                {
                    b.HasOne("RepositoryLibrary.Models.LessonType", "LessonType")
                        .WithMany()
                        .HasForeignKey("LessonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonType");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.SchoolUser", b =>
                {
                    b.HasOne("RepositoryLibrary.Models.School", "School")
                        .WithMany("SchoolUsers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.UserHorse", b =>
                {
                    b.HasOne("RepositoryLibrary.Models.Horse", "Horse")
                        .WithMany("UserHorses")
                        .HasForeignKey("HorseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Horse");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.UserPayment", b =>
                {
                    b.HasOne("RepositoryLibrary.Models.Package", "PackageBought")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackageBought");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Horse", b =>
                {
                    b.Navigation("LessonHorses");

                    b.Navigation("UserHorses");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.Lesson", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("LessonHorses");

                    b.Navigation("LessonProfs");
                });

            modelBuilder.Entity("RepositoryLibrary.Models.School", b =>
                {
                    b.Navigation("Logo")
                        .IsRequired();

                    b.Navigation("SchoolUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
