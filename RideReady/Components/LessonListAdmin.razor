@rendermode InteractiveServer
@inject DialogService DialogService
@inject ILessonService lessonService
@inject IBookingService bookingService
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@using Microsoft.EntityFrameworkCore
@using Microsoft.IdentityModel.Tokens
@using RepositoryLibrary.IServices
@using RepositoryLibrary.Models
@inject NavigationManager NavigationManager
@using System.Security.Claims

@if(lessons is null)
{
 <p>loading...</p>
}
else
{
<div class="border border-1">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-12">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-12">
        <RadzenLabel Text="Select Date" Component="RadzenDatePickerBindValue" />
        <RadzenDatePicker @bind-Value=@value Name="RadzenDatePickerBindValue" ShowCalendarWeek />
        </RadzenStack>
        <RadzenButton Text="Create" Click="@(() => NavigationManager.NavigateTo($"/dashboard"))" Style="width: 25%" />
</RadzenStack>

<RadzenDataList 
                     AllowPaging="true"
                    Data="@lessons" TItem="Lesson" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
        <Template Context="lesson">
            <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
                <RadzenRow Gap="0">
                    <RadzenColumn Size="12" SizeLG="2" class="rz-p-4 product-title">
                        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">@(lesson.School.SchoolName)</RadzenText>
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeLG="7" class="rz-p-4">
                        <RadzenRow Gap="0">
                            <RadzenColumn Size="12" SizeMD="2" SizeLG="2">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Dia</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@(lesson.BeginOfLesson.ToString("yyyy-MM-dd"))</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="2" SizeLG="2">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Inicio</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@(lesson.BeginOfLesson.ToString("HH:mm"))</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="2" SizeLG="2">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Fim</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@(lesson.EndOfLesson.ToString("HH:mm"))</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="2" SizeLG="2">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Tipo de Aula</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@(lesson.LessonType.Name)</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="2" SizeLG="2">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-mb-0">Lugares</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">@(bookedSpots[lesson.LessonId])/@(lesson.MaxSpots)</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="2" SizeMD="2" SizeLG="2" class="rz-text-align-start rz-text-align-lg-end">
                                <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" class="price-badge" Text=@(lesson.LessonType.DurationInMinutes.ToString() + "mins") />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenColumn>
                    <RadzenColumn Size="2" SizeLG="1" class="rz-p-4">
                        <RadzenButton Text="Delete" Click=@(args => DeleteLesson(lesson.LessonId)) Style="width: 100%" />
                    </RadzenColumn>
                    <RadzenColumn Size="2" SizeLG="1" class="rz-p-4">
                        @* <RadzenButton Text="Edit" Click="@(() => NavigationManager.NavigateTo($"/dashboard"))" Style="width: 100%" /> *@
                        <EditLessonButton lessonId="lesson.LessonId" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </Template>
    </RadzenDataList>
</div>
<style>
.product-title {
    min-height: 72px;
    background-color: var(--rz-secondary-lighter);
}
.price-badge {
    font-size: 16px;
    font-weight: bold;
    line-height: 20px;
    padding: 8px;
}
</style>
}


@code {

    public IEnumerable<Lesson> lessons {get; set;} = [];
    public DateOnly value {get; set;}
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string userRole {get;set;}
    string? test {get; set;} = null;
    List<Claim> Claims {get;set;}
    string? userIdTest {get; set;} = null;
    Variant variant = Variant.Filled;
    private Dictionary<int, int> bookedSpots= new();
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        lessons = await lessonService.GetAllLessonsAsync();
        foreach(var lesson in lessons)
        {
            bookedSpots[lesson.LessonId] = await BookingsLesson(lesson.LessonId);
        }

    }

    private async Task<int> BookingsLesson(int lessonId)
    {
        var bookings = await bookingService.GetBookingByLesson(lessonId);
        return bookings.Count;
    }

    private async Task DeleteLesson(int LessonId)
    {
        @* var userId = httpContext.User.Claims.FirstOrDefault(u=> u.Type == ClaimTypes.NameIdentifier).Value; *@
        await lessonService.DeleteLessonAsync(LessonId);
        StateHasChanged();
    }
}
