@page "/users"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using RepositoryLibrary.IServices
@using RepositoryLibrary.Models
@using RepositoryLibrary.Models.DTOs
@using RepositoryLibrary.Services
@using System.Security.Claims
@using RideReady.Components.Modals

@inject IUserService _userService
@inject ISchoolService _schoolService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DialogService dialogService

<h1>@SchoolName</h1>

<RadzenDataGrid AllowFiltering="false" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
Data="@users" TItem="UpdateUserDto" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" 
SelectionMode="DataGridSelectionMode.Single" CellRender="@CellRender">
    <Columns>
            <RadzenDataGridColumn 
            Title="User" 
            Frozen="true" Width="160px" >
                <Template Context="user">
                    <RadzenImage 
                    Path="@(user.Photo is not null ? Convert.ToBase64String(user.Photo.UserPhoto) : "User_default_image/user.png")" 
                    Style="width: 32px; height: 32px;" class="rz-border-radius-4 rz-me-2" AlternateText="@($"{user.FirstName} {user.LastName}")" />
                    @($"{user.FirstName} {user.LastName}")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(UpdateUserDto.Email)" Title="Email" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(UpdateUserDto.Address)" Title="Address" Width="160px" />
            <RadzenDataGridColumn Property="@nameof(UpdateUserDto.Birthdate)" Title="Birthdate" Width="160px">
                <Template Context="user">
                    @(DateOnly.FromDateTime(user.Birthdate).ToString("dd, MMM, yyyy"))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Role" Width="160px" >
                <Template Context="user">
                    @(user.Roles.First())
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="State" Width="160px" >
                <Template Context="user">
                    @(user.IsActive ? "Active" : "Inactive")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Title="State" Width="160px">
                <Template Context="user">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => OpenRender(user))" @onclick:stopPropagation="true" />
                </Template>
            </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<UpdateUserDto> usersGrid;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<UpdateUserDto> users = new();
    List<UpdateUserDto> userToInsert = new List<UpdateUserDto>();
    List<UpdateUserDto> userToUpdate = new List<UpdateUserDto>();
    private string SchoolName { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal? claimsPrincipal = authenticationState.User;

        int schoolId = Convert.ToInt32(claimsPrincipal.FindFirst("SchoolId")?.Value);
        School school = await _schoolService.GetSchoolByIdAsync(schoolId);
        SchoolName = school.SchoolName;
        users = await _userService.GetAllUsers(schoolId);
    }

    void CellRender(DataGridCellRenderEventArgs<UpdateUserDto> args) 
    {
        if(args.Column.Property == "IsActive") 
        {
            args.Attributes.Add("class", args.Data.IsActive ? "text-success" : "text-danger");
        }
    }

    public async Task OpenOrder(UpdateUserDto user)
    {
        await LoadStateAsync();

        await dialogService.OpenAsync<UserModal>($"{user.FirstName} {user.LastName}",
               new Dictionary<string, object>() { { "User", user } },
               new DialogOptions()
                   {
                       Resizable = true,
                       Draggable = true,
                       Resize = OnResize, 
                       Drag = OnDrag,
                       Width = Settings != null ? Settings.Width : "700px",
                       Height = Settings != null ? Settings.Height : "512px",
                       Left = Settings != null ? Settings.Left : null,
                       Top = Settings != null ? Settings.Top : null
                   });

        await SaveStateAsync();
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await JSRuntime.InvokeAsync<string>("window.localStorage.getItem", "DialogSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _settings = JsonSerializer.Deserialize<DialogSettings>(result);
        }
    }

    void OnDrag(System.Drawing.Point point)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog drag. Left:{point.X}, Top:{point.Y}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Left = $"{point.X}px";
        Settings.Top = $"{point.Y}px";

        InvokeAsync(SaveStateAsync);
    }

    void OnResize(System.Drawing.Size size)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog resize. Width:{size.Width}, Height:{size.Height}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Width = $"{size.Width}px";
        Settings.Height = $"{size.Height}px";

        InvokeAsync(SaveStateAsync);
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await JSRuntime.InvokeVoidAsync("window.localStorage.setItem", "DialogSettings", JsonSerializer.Serialize<DialogSettings>(Settings));
    }

    public class DialogSettings
    {
        public string Left { get; set; }
        public string Top { get; set; }
        public string Width { get; set; }
        public string Height { get; set; }
    }

    DialogSettings _settings;
    public DialogSettings Settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }
}
